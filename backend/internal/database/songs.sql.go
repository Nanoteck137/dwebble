// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: songs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSong = `-- name: CreateSong :exec
INSERT INTO songs (id, name, cover_art, album_id, artist_id) VALUES ($1, $2, $3, $4, $5)
`

type CreateSongParams struct {
	ID       string      `json:"id"`
	Name     string      `json:"name"`
	CoverArt pgtype.Text `json:"coverArt"`
	AlbumID  string      `json:"albumId"`
	ArtistID string      `json:"artistId"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) error {
	_, err := q.db.Exec(ctx, createSong,
		arg.ID,
		arg.Name,
		arg.CoverArt,
		arg.AlbumID,
		arg.ArtistID,
	)
	return err
}

const deleteAllSongs = `-- name: DeleteAllSongs :exec
DELETE FROM songs
`

func (q *Queries) DeleteAllSongs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllSongs)
	return err
}

const getAllSongs = `-- name: GetAllSongs :many
SELECT id, name, cover_art, album_id, artist_id FROM songs
`

func (q *Queries) GetAllSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.db.Query(ctx, getAllSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CoverArt,
			&i.AlbumID,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSong = `-- name: GetSong :one
SELECT id, name, cover_art, album_id, artist_id FROM songs WHERE id=$1
`

func (q *Queries) GetSong(ctx context.Context, id string) (Song, error) {
	row := q.db.QueryRow(ctx, getSong, id)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverArt,
		&i.AlbumID,
		&i.ArtistID,
	)
	return i, err
}

const getSongsByAlbum = `-- name: GetSongsByAlbum :many
SELECT id, name, cover_art, album_id, artist_id FROM songs WHERE album_id=$1
`

func (q *Queries) GetSongsByAlbum(ctx context.Context, albumID string) ([]Song, error) {
	rows, err := q.db.Query(ctx, getSongsByAlbum, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CoverArt,
			&i.AlbumID,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: albums.sql

package database

import (
	"context"
)

const getAlbum = `-- name: GetAlbum :one
SELECT id, name, cover_art, artist_id FROM albums WHERE id=$1
`

func (q *Queries) GetAlbum(ctx context.Context, id string) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverArt,
		&i.ArtistID,
	)
	return i, err
}

const getAllAlbums = `-- name: GetAllAlbums :many
SELECT id, name, cover_art, artist_id FROM albums
`

func (q *Queries) GetAllAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.Query(ctx, getAllAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Album{}
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CoverArt,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

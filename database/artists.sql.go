// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: artists.sql

package database

import (
	"context"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (id, path, name, picture) VALUES ($1, $2, $3, $4) RETURNING id, name, picture, path
`

type CreateArtistParams struct {
	ID      string `json:"id"`
	Path    string `json:"path"`
	Name    string `json:"name"`
	Picture string `json:"picture"`
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) (Artist, error) {
	row := q.db.QueryRow(ctx, createArtist,
		arg.ID,
		arg.Path,
		arg.Name,
		arg.Picture,
	)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Picture,
		&i.Path,
	)
	return i, err
}

const deleteAllArtists = `-- name: DeleteAllArtists :exec
DELETE FROM artists
`

func (q *Queries) DeleteAllArtists(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllArtists)
	return err
}

const getAllArtists = `-- name: GetAllArtists :many
SELECT id, name, picture, path FROM artists ORDER BY name
`

func (q *Queries) GetAllArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.Query(ctx, getAllArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Picture,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtist = `-- name: GetArtist :one
SELECT id, name, picture, path FROM artists WHERE id=$1
`

func (q *Queries) GetArtist(ctx context.Context, id string) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtist, id)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Picture,
		&i.Path,
	)
	return i, err
}

const getArtistByName = `-- name: GetArtistByName :many
SELECT id, name, picture, path FROM artists WHERE name LIKE $1
`

func (q *Queries) GetArtistByName(ctx context.Context, name string) ([]Artist, error) {
	rows, err := q.db.Query(ctx, getArtistByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Picture,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtistByPath = `-- name: GetArtistByPath :one
SELECT id, name, picture, path FROM artists WHERE path=$1
`

func (q *Queries) GetArtistByPath(ctx context.Context, path string) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtistByPath, path)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Picture,
		&i.Path,
	)
	return i, err
}

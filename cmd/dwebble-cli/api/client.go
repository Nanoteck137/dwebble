// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator
package api


func (c *Client) AddItemToPlaylist(id string, body AddItemToPlaylistBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) AddToUserQuickPlaylist(body TrackId, options Options) (*any, error) {
	path := "/api/v1/user/quickplaylist"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) ChangePassword(body ChangePasswordBody, options Options) (*any, error) {
	path := "/api/v1/auth/password"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) CleanupLibrary(options Options) (*any, error) {
	path := "/api/v1/system/library/cleanup"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) ClearPlaylist(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items/all", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) CreateApiToken(body CreateApiTokenBody, options Options) (*CreateApiToken, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateApiToken](data, body)
}

func (c *Client) CreatePlaylist(body CreatePlaylistBody, options Options) (*CreatePlaylist, error) {
	path := "/api/v1/playlists"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreatePlaylist](data, body)
}

func (c *Client) CreatePlaylistFromFilter(body PostPlaylistFilterBody, options Options) (*CreatePlaylist, error) {
	path := "/api/v1/playlists/filter"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreatePlaylist](data, body)
}

func (c *Client) CreateTaglist(body CreateTaglistBody, options Options) (*CreateTaglist, error) {
	path := "/api/v1/taglists"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[CreateTaglist](data, body)
}

func (c *Client) DeleteApiToken(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) DeletePlaylist(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) DeleteTaglist(id string, options Options) (*any, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) GetAlbumById(id string, options Options) (*GetAlbumById, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAlbumById](data, nil)
}


func (c *Client) GetAlbumTracks(id string, options Options) (*GetAlbumTracks, error) {
	path := Sprintf("/api/v1/albums/%v/tracks", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAlbumTracks](data, nil)
}

func (c *Client) GetAlbums(options Options) (*GetAlbums, error) {
	path := "/api/v1/albums"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAlbums](data, nil)
}

func (c *Client) GetAllApiTokens(options Options) (*GetAllApiTokens, error) {
	path := "/api/v1/user/apitoken"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAllApiTokens](data, nil)
}

func (c *Client) GetArtistAlbums(id string, options Options) (*GetArtistAlbumsById, error) {
	path := Sprintf("/api/v1/artists/%v/albums", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetArtistAlbumsById](data, nil)
}

func (c *Client) GetArtistById(id string, options Options) (*GetArtistById, error) {
	path := Sprintf("/api/v1/artists/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetArtistById](data, nil)
}


func (c *Client) GetArtists(options Options) (*GetArtists, error) {
	path := "/api/v1/artists"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetArtists](data, nil)
}


func (c *Client) GetMe(options Options) (*GetMe, error) {
	path := "/api/v1/auth/me"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMe](data, nil)
}

func (c *Client) GetMediaFromAlbum(albumId string, body GetMediaFromAlbumBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/album/%v", albumId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, body)
}

func (c *Client) GetMediaFromArtist(artistId string, body GetMediaFromArtistBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/artist/%v", artistId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, body)
}

func (c *Client) GetMediaFromFilter(body GetMediaFromFilterBody, options Options) (*GetMedia, error) {
	path := "/api/v1/media/filter"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, body)
}

func (c *Client) GetMediaFromIds(body GetMediaFromIdsBody, options Options) (*GetMedia, error) {
	path := "/api/v1/media/ids"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, body)
}

func (c *Client) GetMediaFromPlaylist(playlistId string, body GetMediaFromPlaylistBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/playlist/%v", playlistId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, body)
}

func (c *Client) GetMediaFromTaglist(taglistId string, body GetMediaFromTaglistBody, options Options) (*GetMedia, error) {
	path := Sprintf("/api/v1/media/taglist/%v", taglistId)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetMedia](data, body)
}

func (c *Client) GetPlaylistById(id string, options Options) (*GetPlaylistById, error) {
	path := Sprintf("/api/v1/playlists/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetPlaylistById](data, nil)
}

func (c *Client) GetPlaylistItems(id string, options Options) (*GetPlaylistItems, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetPlaylistItems](data, nil)
}

func (c *Client) GetPlaylists(options Options) (*GetPlaylists, error) {
	path := "/api/v1/playlists"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetPlaylists](data, nil)
}

func (c *Client) GetSyncStatus(options Options) (*any, error) {
	path := "/api/v1/system/library"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) GetSystemInfo(options Options) (*GetSystemInfo, error) {
	path := "/api/v1/system/info"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetSystemInfo](data, nil)
}

func (c *Client) GetTaglistById(id string, options Options) (*GetTaglistById, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetTaglistById](data, nil)
}

func (c *Client) GetTaglistTracks(id string, options Options) (*GetTaglistTracks, error) {
	path := Sprintf("/api/v1/taglists/%v/tracks", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetTaglistTracks](data, nil)
}

func (c *Client) GetTaglists(options Options) (*GetTaglists, error) {
	path := "/api/v1/taglists"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetTaglists](data, nil)
}

func (c *Client) GetTrackById(id string, options Options) (*GetTrackById, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetTrackById](data, nil)
}


func (c *Client) GetTracks(options Options) (*GetTracks, error) {
	path := "/api/v1/tracks"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetTracks](data, nil)
}

func (c *Client) GetUserQuickPlaylistItemIds(options Options) (*GetUserQuickPlaylistItemIds, error) {
	path := "/api/v1/user/quickplaylist"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetUserQuickPlaylistItemIds](data, nil)
}

func (c *Client) RefillSearch(options Options) (*any, error) {
	path := "/api/v1/system/search"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) RemoveItemFromUserQuickPlaylist(body TrackId, options Options) (*any, error) {
	path := "/api/v1/user/quickplaylist"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) RemovePlaylistItem(id string, body RemovePlaylistItemBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "DELETE",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) SearchAlbums(options Options) (*GetAlbums, error) {
	path := "/api/v1/albums/search"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetAlbums](data, nil)
}

func (c *Client) SearchArtists(options Options) (*GetArtists, error) {
	path := "/api/v1/artists/search"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetArtists](data, nil)
}

func (c *Client) SearchTracks(options Options) (*GetTracks, error) {
	path := "/api/v1/tracks/search"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "GET",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[GetTracks](data, nil)
}

func (c *Client) Signin(body SigninBody, options Options) (*Signin, error) {
	path := "/api/v1/auth/signin"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signin](data, body)
}

func (c *Client) Signup(body SignupBody, options Options) (*Signup, error) {
	path := "/api/v1/auth/signup"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[Signup](data, body)
}


func (c *Client) SyncLibrary(options Options) (*any, error) {
	path := "/api/v1/system/library"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "POST",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, nil)
}

func (c *Client) UpdateTaglist(id string, body UpdateTaglistBody, options Options) (*any, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *Client) UpdateUserSettings(body UpdateUserSettingsBody, options Options) (*any, error) {
	path := "/api/v1/user/settings"
	url, err := createUrl(c.addr, path, options.Query)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: "PATCH",
		ClientHeaders: c.Headers,
		Headers: options.Header,
	}
	return Request[any](data, body)
}

func (c *ClientUrls) AddItemToPlaylist(id string) (*URL, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	return c.getUrl(path)
}

func (c *ClientUrls) AddToUserQuickPlaylist() (*URL, error) {
	path := "/api/v1/user/quickplaylist"
	return c.getUrl(path)
}

func (c *ClientUrls) ChangePassword() (*URL, error) {
	path := "/api/v1/auth/password"
	return c.getUrl(path)
}

func (c *ClientUrls) CleanupLibrary() (*URL, error) {
	path := "/api/v1/system/library/cleanup"
	return c.getUrl(path)
}

func (c *ClientUrls) ClearPlaylist(id string) (*URL, error) {
	path := Sprintf("/api/v1/playlists/%v/items/all", id)
	return c.getUrl(path)
}

func (c *ClientUrls) CreateApiToken() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) CreatePlaylist() (*URL, error) {
	path := "/api/v1/playlists"
	return c.getUrl(path)
}

func (c *ClientUrls) CreatePlaylistFromFilter() (*URL, error) {
	path := "/api/v1/playlists/filter"
	return c.getUrl(path)
}

func (c *ClientUrls) CreateTaglist() (*URL, error) {
	path := "/api/v1/taglists"
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteApiToken(id string) (*URL, error) {
	path := Sprintf("/api/v1/user/apitoken/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) DeletePlaylist(id string) (*URL, error) {
	path := Sprintf("/api/v1/playlists/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) DeleteTaglist(id string) (*URL, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetAlbumById(id string) (*URL, error) {
	path := Sprintf("/api/v1/albums/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetAlbumImage(albumId string, image string) (*URL, error) {
	path := Sprintf("/files/albums/images/%v/%v", albumId, image)
	return c.getUrl(path)
}

func (c *ClientUrls) GetAlbumTracks(id string) (*URL, error) {
	path := Sprintf("/api/v1/albums/%v/tracks", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetAlbums() (*URL, error) {
	path := "/api/v1/albums"
	return c.getUrl(path)
}

func (c *ClientUrls) GetAllApiTokens() (*URL, error) {
	path := "/api/v1/user/apitoken"
	return c.getUrl(path)
}

func (c *ClientUrls) GetArtistAlbums(id string) (*URL, error) {
	path := Sprintf("/api/v1/artists/%v/albums", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetArtistById(id string) (*URL, error) {
	path := Sprintf("/api/v1/artists/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetArtistFile(artistId string, file string) (*URL, error) {
	path := Sprintf("/files/artists/%v/%v", artistId, file)
	return c.getUrl(path)
}

func (c *ClientUrls) GetArtists() (*URL, error) {
	path := "/api/v1/artists"
	return c.getUrl(path)
}

func (c *ClientUrls) GetDefaultImage(image string) (*URL, error) {
	path := Sprintf("/files/images/default/%v", image)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMe() (*URL, error) {
	path := "/api/v1/auth/me"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaFromAlbum(albumId string) (*URL, error) {
	path := Sprintf("/api/v1/media/album/%v", albumId)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaFromArtist(artistId string) (*URL, error) {
	path := Sprintf("/api/v1/media/artist/%v", artistId)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaFromFilter() (*URL, error) {
	path := "/api/v1/media/filter"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaFromIds() (*URL, error) {
	path := "/api/v1/media/ids"
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaFromPlaylist(playlistId string) (*URL, error) {
	path := Sprintf("/api/v1/media/playlist/%v", playlistId)
	return c.getUrl(path)
}

func (c *ClientUrls) GetMediaFromTaglist(taglistId string) (*URL, error) {
	path := Sprintf("/api/v1/media/taglist/%v", taglistId)
	return c.getUrl(path)
}

func (c *ClientUrls) GetPlaylistById(id string) (*URL, error) {
	path := Sprintf("/api/v1/playlists/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetPlaylistItems(id string) (*URL, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetPlaylists() (*URL, error) {
	path := "/api/v1/playlists"
	return c.getUrl(path)
}

func (c *ClientUrls) GetSyncStatus() (*URL, error) {
	path := "/api/v1/system/library"
	return c.getUrl(path)
}

func (c *ClientUrls) GetSystemInfo() (*URL, error) {
	path := "/api/v1/system/info"
	return c.getUrl(path)
}

func (c *ClientUrls) GetTaglistById(id string) (*URL, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetTaglistTracks(id string) (*URL, error) {
	path := Sprintf("/api/v1/taglists/%v/tracks", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetTaglists() (*URL, error) {
	path := "/api/v1/taglists"
	return c.getUrl(path)
}

func (c *ClientUrls) GetTrackById(id string) (*URL, error) {
	path := Sprintf("/api/v1/tracks/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) GetTrackFile(trackId string, file string) (*URL, error) {
	path := Sprintf("/files/tracks/%v/%v", trackId, file)
	return c.getUrl(path)
}

func (c *ClientUrls) GetTracks() (*URL, error) {
	path := "/api/v1/tracks"
	return c.getUrl(path)
}

func (c *ClientUrls) GetUserQuickPlaylistItemIds() (*URL, error) {
	path := "/api/v1/user/quickplaylist"
	return c.getUrl(path)
}

func (c *ClientUrls) RefillSearch() (*URL, error) {
	path := "/api/v1/system/search"
	return c.getUrl(path)
}

func (c *ClientUrls) RemoveItemFromUserQuickPlaylist() (*URL, error) {
	path := "/api/v1/user/quickplaylist"
	return c.getUrl(path)
}

func (c *ClientUrls) RemovePlaylistItem(id string) (*URL, error) {
	path := Sprintf("/api/v1/playlists/%v/items", id)
	return c.getUrl(path)
}

func (c *ClientUrls) SearchAlbums() (*URL, error) {
	path := "/api/v1/albums/search"
	return c.getUrl(path)
}

func (c *ClientUrls) SearchArtists() (*URL, error) {
	path := "/api/v1/artists/search"
	return c.getUrl(path)
}

func (c *ClientUrls) SearchTracks() (*URL, error) {
	path := "/api/v1/tracks/search"
	return c.getUrl(path)
}

func (c *ClientUrls) Signin() (*URL, error) {
	path := "/api/v1/auth/signin"
	return c.getUrl(path)
}

func (c *ClientUrls) Signup() (*URL, error) {
	path := "/api/v1/auth/signup"
	return c.getUrl(path)
}

func (c *ClientUrls) SseHandler() (*URL, error) {
	path := "/api/v1/system/library/sse"
	return c.getUrl(path)
}

func (c *ClientUrls) SyncLibrary() (*URL, error) {
	path := "/api/v1/system/library"
	return c.getUrl(path)
}

func (c *ClientUrls) UpdateTaglist(id string) (*URL, error) {
	path := Sprintf("/api/v1/taglists/%v", id)
	return c.getUrl(path)
}

func (c *ClientUrls) UpdateUserSettings() (*URL, error) {
	path := "/api/v1/user/settings"
	return c.getUrl(path)
}
